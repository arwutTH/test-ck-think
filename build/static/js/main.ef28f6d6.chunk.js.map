{"version":3,"sources":["components/Topbar.js","pages/Testprogram.js","App.js","serviceWorker.js","index.js"],"names":["Topbar","props","className","Navbar","bg","variant","React","Component","Testprogram","setOption","fakerData","state","page","sizePerPageList","text","value","length","sizePerPage","pageStartIndex","paginationSize","prePage","nextPage","firstPage","lastPage","paginationPosition","toggleBlocking","setState","blocking","setTimeout","fetchData","axios","get","then","resp","data","finally","e","this","start","to","total","style","color","Button","onClick","InputGroup","FormControl","placeholder","aria-describedby","type","data-provide","data-date-language","tag","pagination","ref","search","options","dataField","dataAlign","isKey","dataSort","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ef28f6d6.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Navbar} from \"react-bootstrap\"\r\n\r\nclass Topbar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div className={'row'}>\r\n                <div className={'col-12 '}>\r\n                    <Navbar bg=\"dark\" variant=\"dark\">\r\n\r\n                    </Navbar>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Topbar","import React from 'react'\r\nimport axios from 'axios'\r\nimport {BootstrapTable, TableHeaderColumn} from 'react-bootstrap-table'\r\nimport {\r\n    InputGroup,\r\n    FormControl,\r\n    Button\r\n} from 'react-bootstrap'\r\nimport BlockUi from 'react-block-ui';\r\nimport Topbar from \"../components/Topbar\";\r\n\r\nclass Testprogram extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            fakerData: null,\r\n            blocking: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.toggleBlocking()\r\n    }\r\n\r\n    renderShowsTotal(start, to, total) {\r\n        return (\r\n            <p style={{color: 'blue'}}>\r\n                From {start} to {to}, totals is {total}&nbsp;&nbsp;(its a customize text)\r\n            </p>\r\n        );\r\n    }\r\n\r\n    setOption = () => {\r\n        const {fakerData} = this.state\r\n        const options = {\r\n            page: 1,\r\n            sizePerPageList: [{\r\n                text: '5', value: 5\r\n            }, {\r\n                text: '10', value: 10\r\n            }, {\r\n                text: 'All', value: fakerData?.length\r\n            }],\r\n            sizePerPage: 5,\r\n            pageStartIndex: 1,\r\n            paginationSize: 3,\r\n            prePage: 'Prev',\r\n            nextPage: 'Next',\r\n            firstPage: 'First',\r\n            lastPage: 'Last',\r\n            paginationPosition: 'bottom'\r\n        };\r\n        return options\r\n    }\r\n    toggleBlocking = () => {\r\n        this.setState({blocking: !this.state.blocking})\r\n        setTimeout(() => {\r\n            this.fetchData()\r\n        }, 1000)\r\n    }\r\n    fetchData = () => {\r\n        axios.get(`https://jsonplaceholder.typicode.com/todos/`).then(resp => {\r\n            this.setState({\r\n                fakerData: resp?.data\r\n            })\r\n        }).finally(e => {\r\n            this.setState({blocking: !this.state.blocking})\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        const {fakerData} = this.state\r\n        return (\r\n            <div className=\"container\">\r\n                <Topbar/>\r\n                <div className={'col-12'}>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-12 mb-2\">\r\n                            <Button className=\"btn btn-success float-right\"\r\n                                    onClick={e => this.toggleBlocking()}>feactData</Button>\r\n                            <div className=\"col-3 float-right\">\r\n                                <InputGroup className=\"mb-3\">\r\n                                    <FormControl\r\n                                        placeholder=\"time\"\r\n                                        aria-describedby=\"basic-addon1\"\r\n                                        type={\"time\"}\r\n                                    />\r\n                                </InputGroup>\r\n                            </div>\r\n                            <div className=\"col-3 float-right\">\r\n                                <InputGroup className=\"mb-3\">\r\n                                    <FormControl\r\n                                        placeholder=\"date\"\r\n                                        aria-describedby=\"basic-addon1\"\r\n                                        type={\"date\"}\r\n                                        data-provide=\"datepicker\" data-date-language=\"th-th\"\r\n                                    />\r\n                                </InputGroup>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                    <BlockUi tag=\"div\" blocking={this.state.blocking}>\r\n                        <BootstrapTable data={fakerData} pagination={true} ref='table' search\r\n                                        options={this.setOption()}\r\n                        >\r\n                            <TableHeaderColumn dataField={\"id\"} dataAlign=\"center\" isKey={true}\r\n                                               dataSort={true}>ลำดับ</TableHeaderColumn>\r\n                            <TableHeaderColumn dataField={\"userId\"} dataAlign=\"center\"\r\n                                               dataSort={true}>รหัสเลข</TableHeaderColumn>\r\n                            <TableHeaderColumn dataField={\"title\"} dataAlign=\"left\"\r\n                                               dataSort={true}>หัวข้อ</TableHeaderColumn>\r\n                            <TableHeaderColumn dataField={\"completed\"} dataAlign=\"center\"\r\n                                               dataSort={true}>เสร็จสิ้น</TableHeaderColumn>\r\n                        </BootstrapTable>\r\n                    </BlockUi>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Testprogram","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './assets/custom.css'\nimport './App.css';\nimport Testprogram from \"./pages/Testprogram\";\nimport 'animate.css/animate.min.css'\nimport 'react-bootstrap-table/dist/react-bootstrap-table-all.min.css'\nimport 'react-block-ui/style.css';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route\n} from \"react-router-dom\";\nfunction App() {\n    return (\n        <div>\n            <Router>\n                <Switch>\n                    <Route path=\"/\" component={Testprogram}/>\n                </Switch>\n            </Router>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}